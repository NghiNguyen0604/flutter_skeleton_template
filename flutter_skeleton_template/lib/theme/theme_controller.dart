/*
 * Autogenerated header by File Header Comment extension - Donna Iwan
 * File:       theme_controller.dart
 * Created on: Mon Dec 13 2021
 * Author:     Tong Vu Than Dan
 *
 * Copyright (c) 2021 Tong Vu Than Dan
 *
 * Description 
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'theme_service.dart';

///Manage theme mode with state notifier, default is [ThemeMode.system]
///This controller will manage save to local
class ThemeModeController extends StateNotifier<ThemeMode> {
  ///Construct
  ThemeModeController(
    this._themeService,
  ) : super(ThemeMode.system);
  final ThemeService _themeService;

  ///Load theme mode from local,
  ///
  ///Update the state of provider
  Future<void> getThemeMode() async {
    state = await _themeService.themeMode();
  }

  ///Set thememode with [ThemeMode]
  ///
  ///and save to local for next app launch
  Future<void> setThemeMode(ThemeMode? rThemeMode) async {
    final _themeMode = state;
    //if null, do nothing
    if (rThemeMode == null) return;
    //if the same, do nothing
    if (rThemeMode == _themeMode) return;
    //otherwise, assign new value to private property
    //Inform all listernsers a change has occurred, if notify flag is true

    state = rThemeMode;
    // debugPrint('After update: ${state.toString()}');

    await _themeService.saveThemeMode(rThemeMode);
    // debugPrint('Set and save theme mode: $_themeMode');
  }
}

///Manage theme  with state notifier, default is 0, the first theme index in the list
///This controller will manage save to local
class SchemeController extends StateNotifier<int> {
  ///Construct
  SchemeController(
    this._themeService,
  ) : super(
          2,
        );
  final ThemeService _themeService;

  ///Load theme mode from local, from app launch, called in main
  ///
  ///return the index of scheme according to the list [AppTheme.schemes]
  ///
  Future<void> getTheme() async {
    state = await _themeService.schemeIndex();
  }

  ///Set scheme index  with [schemeIndex]
  ///
  ///and save to local storage for next app launch
  ///
  Future<void> setTheme(int schemeIndex) async {
    final _themeIndex = state;
    //if null, do nothing
    //if the same, do nothing
    if (schemeIndex == _themeIndex) return;
    //otherwise, assign new value to private property
    //Inform all listernsers a change has occurred, if notify flag is true

    state = schemeIndex;
    // debugPrint('After update: ${state.toString()}');

    await _themeService.saveSchemeIndex(schemeIndex);
    // debugPrint('Set and save theme mode: $_themeMode');
  }
}
